# bool

bool = "true" | "false" ;


# numbers

digit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;

hexDigit = digit | "a" | "A" | "b" | "B" | "c" | "C" | "d" | "D" | "e" | "E" | "f" | "F" ;

hexadecimal = "0" , ( "x" | "X" ) , hexDigit , { hexDigit } ;

integer = digit , { digit } ;

decimal = integer , "." , integer ;

number = [ "-" ] , ( integer | decimal | exponent ) ;

exponent = number , "e^" , number ;


# strings

letter = [\u0041-\u005A]
	| [\u0061-\u007A]
	| [\u0080-\u00FF]
	| [\u0100-\u1FFF]
	| [\u3040-\u318F]
	| [\u3300-\u337F]
	| [\u3400-\u3D2D]
	| [\u4E00-\u9FFF]
	| [\uF900-\uFAFF] ;

identifierStartChar = letter | "_" ;

identifierChar = letter | digit | "_" ;

identifier = identifierStartChar , { identifierChar } ;

genericTypes = "<|" , identifierWithPossibleGenericTypes , { "," , identifierWithPossibleGenericTypes } , "|>" ;

identifierWithPossibleGenericTypes = identifier , [ genericTypes ] ;

possibleBoolIdentifier = identifier , [ "?" ] ;

possibleBoolIdentifierWithPossibleGenericTypes = possibleBoolIdentifier , [ genericTypes ] ;

memberObject = ( identifierWithPossibleGenericTypes | memberExpressionUsingDotNotation | memberExpressionUsingBracketNotation ) ;

memberExpressionUsingDotNotation = memberObject , "." , possibleBoolIdentifierWithPossibleGenericTypes ;

memberExpressionUsingBracketNotation = memberObject , "[" , expression , "]" ;

memberExpression = ( memberExpressionUsingDotNotation | memberExpressionUsingBracketNotation ) ;

doubleQuotedString = '"' , { ( ~'"' | '\\"' ) } , '"' ;

singleQuotedString = "'" , { ( ~"'" | "\\'" ) } , "'" ;

string = ( doubleQuotedString | singleQuotedString ) ;

escapedChar = "\\" , ( "'" | '"' | "\\" | "n" | "t" | "r" | "b" | "f" ) ;


# types

path = ( "@" | "." ) , "/" , identifier , { "/" , identifier } , ( ("." , identifier ) | "/" ) ;

type = ( identifierWithPossibleGenericTypes | arrayShape | functionSignature | objectShape | tupleShape ) ;

types = type , { "," , type } ;

typeAnnotation = ":" , type ;

typeAnnotations = ":" , types ;

arrayShape = type , "[]" ;

functionSignature = [ modifiers ] , "f" , [ genericTypes ] , [ functionParams ] , [ returnTypes ] ;

tupleShape = "<" , [ type , { "," , type } ] , ">" ;

tuple = "<" , [ expression , { "," , expression } ] , ">" ;


# parameters

rest = "..." ;

param = [ rest ] , possibleBoolIdentifier , [ typeAnnotation ] , [ "=" , expression ] ;

functionParams = "(" , [ param , { "," , param } ] , ")" ;


# statements

use = "use" , identifier , [ "from" , path ] ;

extends = "extends" , identifierWithPossibleGenericTypes , { "," ,  identifierWithPossibleGenericTypes } ;

implements = "implements" , identifierWithPossibleGenericTypes , { "," , identifierWithPossibleGenericTypes } ;

modifier = ( "pub" | "static" | "abstract" | "readonly" ) ;

modifiers = { modifier , { " " , modifier } };


# declarations

class = [ modifiers ] , "class" , identifier , [ genericTypes ] , [ extends ] , [ implements ] , "{" , { variableDeclaration } , { namedFunction } , "}" ;

interface = [ modifiers ] , "interface" , identifier , [ genericTypes ] , [ extends ] , "{" , { variableDeclaration } , { functionSignature } , "}" ;

program = { use } , { ( namedFunction | class | interface ) } ;

shortVariableDeclaration = [ modifiers ] , ( "const" | "let" ) , possibleBoolIdentifier , { "," , possibleBoolIdentifier } ;

variableDeclaration = shortVariableDeclaration , [ typeAnnotations ] , [ "=" , expression, { "," , expression } ] ;


# functions

returnTypes = "->" , [ "(" ] , types , [ ")" ] ;

namedFunction = [ modifiers ] , "f" , possibleBoolIdentifierWithPossibleGenericTypes , [ functionParams ] , [ returnTypes ], "{" , { statement } , "}" ;

anonymousFunction = [ modifiers ] , "f" , [ genericTypes ] , [ functionParams ] , [ returnTypes ], "{" , { statement } , "}" ;

returnStatement = "return" , [ expression , { "," , expression } ] ;

nextStatement = "next" ;

doneStatement = "done" ;

statement = ( variableDeclaration | ifStatement | forStatement | loopStatement | returnStatement | expression | printStatement | doneStatement | nextStatement ) ;

ifStatement = "if" , expression , "{" , { statement } , "}" , [ elseIfStatement ] , [ elseStatement ] ;

elseIfStatement = "else if" , expression , "{" , { statement } , "}" ;

elseStatement = "else" , "{" , { statement } , "}" ;

forStatement = "for" , shortVariableDeclaration , "in" , expression , "{" , { statement } , "}" ;

loopStatement = "loop" , "{" , { statement } , "}" ;


# expressions

expression = ( assignment | ternary | range | array | object | functionCall | anonymousFunction | identifier | literal | tuple | unaryExpression | binaryExpression | parenthesizedExpression ) ;

parenthesizedExpression = "(" , expression , ")" ;

assignment = ( possibleBoolIdentifier | memberExpression ) , "=" , expression ;

ternary = expression , "?" , expression , ":" , expression ;

range = expression , ".." , expression ;

array = "[" , [ expression , { "," , expression } ] , "]" ;

object = "{" , [ objectProperty , { "," , objectProperty } ] , "}" ;

objectProperty = identifier , ":" , expression ;

functionCall = ( possibleBoolIdentifier | memberExpression ) , "(" , [ expressions ] , ")" ;

expressions = [ expression , { "," , expression } ] ;

printStatement = "print" , expressions ;

literal = ( string | number | bool | regex | path ) ;

regex = "/" , { ( ~"/" | "\\/" ) } , "/", [ regexFlags ] ;

regexFlags = { ( "g" | "i" | "m" | "s" ) } ;


# binary expressions

binaryOperator = ( "+" | "-" | "*" | "/" | "%" | "==" | "!=" | "<" | ">" | "<=" | ">=" | "&&" | "||" ) ;

binaryExpression = expression , binaryOperator , expression ;


# unary expressions

unaryPrefixExpression = ( "++" | "--" | "!" ) , expression ;

unaryPostfixExpression = expression , ( "++" | "--" ) ;

unaryExpression = ( unaryPrefixExpression | unaryPostfixExpression ) ;
