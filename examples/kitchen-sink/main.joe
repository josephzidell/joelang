# This is sample .joe file to prove the lexer and parser works.
# Note this file may not necessarily be syntactically correct.

use someFile from ./some_file.joe;

f main {
	// instantiate and call a method
	const myFoo = Foo.create();
	print myFoo.foo();

	// static
	print Foo.bar;
}

class Foo<|A|> extends Bar<|A|>, Baz implements AbstractFooBar<|A|>, AnotherAbstractClass {
	let bar = 'baz'; // let
	const isDone? = true; // const

	/** method with no args */
	f foo -> uint64 {
		const size = when someNumber {
			1, 2 -> 'small',
			3 .. 10 -> 'medium',
			11 -> 'large',
			... -> 'off the charts',
		};

		let myArray = [
			1,
			10 if this.isDone?, // if false, element will not be in array
			3
		];

		// two new arrays [1, 2, 3] and [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]
		let count, countDown = 1 .. myArray[2], myArray[1] .. 0;
		let partitionedArray = [
			countDown[0 .. 1],
			countDown[2 .. 6],
			countDown[7 .. -1],
		]; // new nested Arrays [[10, 9], [8, 7, 6, 5, 4], [3, 2, 1, 0]]
		for const num in countDown[1, 4, 9] { // new array [9, 6, 1]
			print num;
		}

		let myObject = {
			a: 1,
			b: 'coat',
			c: cond ? true : false, // regular ternary - property will always be there, value differs
		};

		loop {
			next;
			done;
		}

		// assign multiple variables
		const myBool, myNumber, myThing = methodThatReturnsBool?();

		const myTuple = <1, true, 'string', @/foo>;

		let partialObj = myObject[a, d]; // new object {a: 1, d: 'foo'}

		let initializeAndAssignLater: int32;
		initializeAndAssignLater = 5;

		return initializeAndAssignLater;
	}

	/** with args */
	f methodWithArgs (arg1: bool, arg2: Tuple, arg3 = true, ...otherStuff: Thing[]) { /* ... */ }

	/** with one return val */
	f methodThatReturnsBool? -> bool {
		return true;
	}

	/** multiple return vals */
	f methodThatReturnsBool? -> bool, dec32, Thing {
		return false, 5.0, Thing.create();
	}
}
