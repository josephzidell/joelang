# This is sample .joe file to prove the lexer and parser works.
# Note this file may not necessarily be syntatically correct.

f main {
	// instantiate and call a method
	const myFoo = new Foo();
	print myFoo.foo();

	// static
	print Foo.bar;
}

class Foo extends Bar, Baz implements AbstractFooBar, AnotherAbstractClass {
	static bar = 'baz'; // public static property
	private isDone? = true; // private instance property

	/** method with no args and no return */
	foo -> number {
		const size = when someNumber {
			1, 2 -> 'small',
			3..10 -> 'medium',
			11 -> 'large',
			... -> 'off the charts',
		};

		let myArray = [
			1,
			10 if this.isDone?, // if false, element will not be in array
			3
		];

		let count = 1..myArray[2]; // new array [1, 2, 3]
		let countDown = myArray[1]..0; // new array [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]
		let partitionedArray = [
			countDown[:1],
			countDown[2:6],
			countDown[7:],
		]; // new nested Arrays [[10, 9], [8, 7, 6, 5, 4], [3, 2, 1, 0]]
		let selectedArrayItems = countDown[1, 4, 9]; // new array [9, 6, 1]

		let myObject = {
			a: 1,
			b: 'coat' if this.isDone?, // if false, property will not be in object
			c: cond ? true : false, // regular ternary - property will always be there, value differs
			d: nil,
		};

		let partialObj = myObject[a, d]; // new object {a: 1, d: nil}

		const initializeAndAssignLater: number = 5;

		return initializeAndAssignLater;
	}

	/** with args */
	methodWithArgs (arg1: bool, arg2: Tuple, arg3 = true, ...otherStuff: Thing[]) { ... }

	/** with one return val */
	methodThatReturnsBool? : bool {
		return true;
	}

	/** multiple return vals */
	methodThatReturnsBool? : bool, number, Thing {
		return false, 5, new Thing();
	}

	/** method that throws error */
	careful! { /* ... */ }

	/** method with bool return that throws error */
	careful?! : bool { /* ... */ }
}
